# Arrhythmia Feature Selection and Classifications (Round 1)

## Install packages
##install.packages("caret")
##install.packages("ggplot2")
##install.packages("DMwR")
##install.packages("FSelector")
## Install package for `AutoSpearman` from: https://awsm-research.github.io/Rnalytica/
##install.packages('devtools')
##devtools::install_github('software-analytics/Rnalytica')
##install.packages("plyr")
##install.packages("UBL")
##install.packages("tidyr")



# Partition arrhythmia_clean dataset into Training and Test Sets


## Shuffle the dataset
### Set seed
set.seed(42)
### Sample row indices
arr_rows1 <- sample(nrow(arrhythmia_clean))
### Save new shuffled dataset
shuffled_data1 <- arrhythmia_clean[arr_rows1, ]

## Divide dataset into training and test sets, (70:30)
### Set seed
set.seed(42)
### Loading library
library(caret)
### Check number of complete observations in dataset
sum(complete.cases(shuffled_data1)) ### 68 cases
###All data will be used to divide into training and test set because in the real-world some observations will also have missing values
### Separate data in training and test sets
inTrain1 <- createDataPartition(y = shuffled_data1$Arrhythmia_Class, p = 0.70, list = FALSE)
training1 <- shuffled_data1[inTrain1,]
test1 <- shuffled_data1[-inTrain1,]
dim(training1) ###323 rows and 280 attributes 



# Data Preprocessing

glimpse(training1)
summary(training1)



# Dealing with Missing Values

## Check Missing Values
sum(is.na(training1)) ###297 missing values
missing_col <- colSums(is.na(training1))
### Attributes with missing values
missing_attr <- names(training1)[missing_col > 0]
missing_attr
summary(training1[,missing_attr])
### Number of Missing Values in these attributes
missing_attr_num <- missing_col[missing_attr]
missing_attr_num
missing_attr_num / 452
###4 attributes have less than 4% missing values and 1 attribute, Vector of angle front J, has approximately 59.7% missing values. 


## Impute for Missing Values using k-Nearest Neighbour algorithm
### Load `DMwR` package
library(DMwR)
### Set seed for reproducible results
set.seed(42)
### Impute for missing values with 25 neighbors,setting 'scale' parameter to FALSE and using medians because medians are more robust to outliers.
training1 <- knnImputation(training1, k = 25, scale = FALSE, meth = 'median')
### Verify No Missing Values
sum(is.na(training1)) ### 0
summary(training1[, missing_attr])



# Removing Zero-Variance Variance Attributes

## Load `caret` package
library(caret)
## Find attributes with zero variance
zero_var_attr <- nearZeroVar(training1, freqCut = 500/1, uniqueCut = 1, names = TRUE)
zero_var_attr
length(zero_var_attr) 
###20 attributes can be removed

## Remove features with zero variance
training1 <- training1[, !(names(training1) %in% zero_var_attr)]
dim(training1) 
###This datset has 323 observations and 260 attributes.



# Feature Reduction With Feature Selection for Arrhythmia Dataset


# Filter-based : Information Gain

## Set seed for reproducibility
set.seed(42)

## Load library
library(FSelector)

## Use `information.gain` function from `FSelector` package and save output
infogain_weights <- information.gain(Arrhythmia_Class~., training1)
##names(infogain_weights)
##str(infogain_weights)

## Saving output as a dataframe 
infogain_df <- data.frame(cbind(rownames(infogain_weights)), infogain_weights$attr_importance)
infogain_df
### Rename column names of infogain_df
names(infogain_df) <- c("attribute", "attr_importance")
str(infogain_df)
### Order attribute importance in decreasing order
infogain_df2 <- infogain_df[order(desc(infogain_df$attr_importance)),]
infogain_df2

## Attributes with more than 0.050 attr_importance
infogain_0.050 <- infogain_df2[round(infogain_df2$attr_importance, 3) >= 0.050,]
infogain_0.050
nrow(infogain_0.050)
subset_50 <- infogain_0.050
###50 features selected

## Attributes with more than 0.100 attr_importance
infogain_0.100 <- infogain_df2[round(infogain_df2$attr_importance,3) >= 0.100,]
infogain_0.100
nrow(infogain_0.100) 
###37 features selected

## Attributes with more than 0.150 attr_importance
infogain_0.150 <- infogain_df2[round(infogain_df2$attr_importance, 3) >= 0.150,]
infogain_0.150
nrow(infogain_0.150) 
###13 features selected

## Subset for top 25 features
subset_25a <- cutoff.k(infogain_weights, 25) 
subset_25a
###V4_QRSTA (attribute importance of 0.1203) was the last attribute to be included
###in this list
subset_25 <- infogain_df2[round(infogain_df2$attr_importance, 4) >= 0.1203,]
subset_25
nrow(subset_25)

## Subset for top 20 features
subset_20 <- cutoff.k(infogain_weights, 20) 
subset_20

## Subset for top 15 features
subset_15 <- cutoff.k(infogain_weights, 15) 
subset_15

## Subset for top 10 features
subset_10 <- cutoff.k(infogain_weights, 10) 
subset_10
###AVF_Amp_T_wave (attribute importance of 0.153) was the last attribute to be included in list
##f_10 <- as.simple.formula(subset_10, "Arrhythmia_Class")
##print(f_10)

### Plot information gain coefficients
library(ggplot2)
ggplot(subset_50, aes(x = 1:50, y = subset_50$attr_importance)) +
  geom_line(col="slateblue", lwd = 1) +
  geom_point()

ggplot(subset_50, aes(x = 1:50, y = subset_50$attr_importance)) +
  geom_line(col="slateblue", lwd = 1) +
  geom_point() +
  scale_y_continuous(limits= c(0, 1))
###The plot shows the first 6 attributes are good to consider because there is a slight leveling after the 6th attribute. 
###There are also less decreases after 11, 17, 21, 26, 34, 43 and 50 variables.


# Wrapper-based : Recursive Feature Elimination-Random Forest

## Load library
library(caret)

## Set seed for reproducibility
set.seed(42)

## Define control to use random forest selection function
rfe_rf_control <- rfeControl(functions = rfFuncs, method = "cv", number = 10)

## Subset sizes to find
rfe_rf_subsets <- c(1:10, 15, 20, 25, 50, 100)

## Set seed
set.seed(42)

## Run recursive feature elimination using `rfe()` function
rfe_rf_results <- rfe(training1[,-1], training1$Arrhythmia_Class, sizes = rfe_rf_subsets, rfeControl = rfe_rf_control)

## Summary of results
rfe_rf_results
###It is observed that the accuracy slightly decreases after 9 attributes and increases up to 25 attributes.
###It increases to 50 by about 0.07% and then decreases to 100 and 254 attributes.
##rfe_rf_results$bestSubset
##rfe_rf_results$optVariables

## List of chosen features
predictors(rfe_rf_results)

## Plot of results
plot(rfe_rf_results, type=c("g", "o"))

## Save as dataframe
rfe_rf_results_df_50 <- data.frame(attribute=predictors(rfe_rf_results))
rfe_rf_results_df_50

## For subsets of 1:25 variables

## Set seed for reproducibility
set.seed(42)

## Subset sizes to find
rfe_rf_subsets2 <- c(1:25)

## Set seed
set.seed(42)

## Run recursive feature elimination using `rfe()` function
rfe_rf_results2 <- rfe(training1[,-1], training1$Arrhythmia_Class, sizes = rfe_rf_subsets2, rfeControl = rfe_rf_control)

## Summary of results
rfe_rf_results2 ###14 attributes.
###The accuracies for the subsets increases with more variables, slightly decreasing from 5 to 6, 8 to 9, 14 to 17, 19 to 20 and 21 to 22.
###24 and 25 variable subsets have the same and best accuracies. This is reduced by about 4% for 254 variable subset.
###rfe_rf_results2$bestSubset
##rfe_rf_results2$optVariables

## List of chosen features
predictors(rfe_rf_results2)

## Plot of results
plot(rfe_rf_results2, type=c("g", "o"))

## Save as dataframe 
rfe_rf_results_df_14 <- data.frame(attribute=predictors(rfe_rf_results2))
rfe_rf_results_df_14


# Hybrid : AutoSpearman

## Install package
###from: https://awsm-research.github.io/Rnalytica/
##install.packages('devtools')
##devtools::install_github('software-analytics/Rnalytica')

## Load `AutoSpearman` package
library(Rnalytica)

## Set seed for reproducibility
set.seed(42)

## Prepare a numerical training dataset to compute Spearman correlation
training_num <- sapply(training1, MARGIN = 2, FUN = as.numeric)
class(training_num) ### matrix
## Change training_num from a matrix to a dataframe
training_num_df <- data.frame(training_num)
str(training_num_df)
## Save independent attributes' names for `metrics` parameter in `AutoSpearman` function
indep_var_names <- names(training_num_df[-1])

## Perform AutoSpearman from `Rnalytica` package

### Using default threshold parameters: spearman.threshold = 0.7, vif.threshold = 5
AutoSpear1 <- AutoSpearman(dataset = training_num_df, metrics = indep_var_names, spearman.threshold = 0.7, vif.threshold = 5, verbose = TRUE)
AutoSpear1
###111 attributes are selected
### Saving output as dataframe
a1 <- data.frame(attribute=AutoSpear1)
###AutoSpearman changed all single quotes to period
## Change "." back to "'"
a1$attribute <- gsub("\\.", "\\'", a1$attribute)
a1

### Using vif.threshold = 3: spearman.threshold = 0.7, vif.threshold = 3
AutoSpear2 <- AutoSpearman(dataset = training_num_df, metrics = indep_var_names, spearman.threshold = 0.7, vif.threshold = 3, verbose = TRUE)
AutoSpear2
### Saving output as dataframe
a2 <- data.frame(attribute=AutoSpear2)
## Change "." back to "'"
a2$attribute <- gsub("\\.", "\\'", a2$attribute)
a2
###91 attributes are selected

### Using spearman.threshold = 0.5 & vif.threshold = 3: spearman.threshold = 0.5, vif.threshold = 3
AutoSpear3 <- AutoSpearman(dataset = training_num_df, metrics = indep_var_names, spearman.threshold = 0.5, vif.threshold = 3, verbose = TRUE)
AutoSpear3
###85 attributes are selected
### Saving output as dataframe
a3 <- data.frame(attribute=AutoSpear3)
## Change "." back to "'"
a3$attribute <- gsub("\\.", "\\'", a3$attribute)
a3

### Using spearman.threshold = 0.5 & vif.threshold = 2: spearman.threshold = 0.5, vif.threshold = 2
AutoSpear4 <-AutoSpearman(dataset = training_num_df, metrics = indep_var_names, spearman.threshold = 0.5, vif.threshold = 2, verbose = TRUE)
AutoSpear4 ##71 variables
### Saving output as dataframe
a4 <- data.frame(attribute=AutoSpear4)
###AutoSpearman changed all single quotes to period
## Change "." back to "'"
a4$attribute <- gsub("\\.", "\\'", a4$attribute)
a4

### Using spearman.threshold = 0.3 & vif.threshold = 2: spearman.threshold = 0.3, vif.threshold = 2
AutoSpear5 <-AutoSpearman(dataset = training_num_df, metrics = indep_var_names, spearman.threshold = 0.3, vif.threshold = 2, verbose = TRUE)
AutoSpear5 ###53 variables
### Saving output as dataframe
a5 <- data.frame(attribute=AutoSpear5)
###AutoSpearman changed all single quotes to period
## Change "." back to "'"
a5$attribute <- gsub("\\.", "\\'", a5$attribute)
a5


# Selecting Feature Subset

## Load `plyr` package
library(plyr)

## Join attributes from 3 feature selection techniques

### Using 50 variables in IG and RFE-RF subsets and 107 variables in AS subset

#### Find common variables using InfoGain and RFE-RF
attr_ig_rfe <- join(subset_50, rfe_rf_results_df_50, by = "attribute", type = "inner")
attr_ig_rfe
#### Find common attributes using InfoGain and AutoSpearman
attr_ig_as <- join(subset_50, a1, by = "attribute", type = "inner")
attr_ig_as
#### Find common variables using RFE-RF and AutoSpearman
attr_as_rfe <- join(a1, rfe_rf_results_df_50, by = "attribute", type = "inner")
attr_as_rfe
#### Find common variables using all Feature Selection Methods
attr_as_ig_rfe <- join(attr_as_rfe, attr_ig_as, by = "attribute", type = "inner")
attr_as_ig_rfe

### Using 25 variables in IG subset and 24 variables in RFE-RF subset and 107 variables in AS subset

### Find common variables using InfoGain and RFE-RF
attr_ig_rfe2 <- join(subset_25, rfe_rf_results_df_14, by = "attribute", type = "inner")
attr_ig_rfe2
### Find common attributes using InfoGain and AutoSpearman
attr_ig_as2 <- join(subset_25, a1, by = "attribute", type = "inner")
attr_ig_as2
#### Find common variables using RFE-RF and AutoSpearman
attr_as_rfe2 <- join(a1, rfe_rf_results_df_14, by = "attribute", type = "inner")
attr_as_rfe2
#### Find common variables using all Feature Selection Methods
attr_as_ig_rfe2 <- join(attr_as_rfe2, attr_ig_as2, by = "attribute", type = "inner")
attr_as_ig_rfe2



# Balancing Imbalanced Arrhythmia Dataset Using SMOTE


## Count samples in classes in Arrythmia_Class
table(training1$Arrhythmia_Class)
prop.table(table(training1$Arrhythmia_Class))

## Loading `UBL` package for `SmoteClassif` function
library(UBL)

## Set seed
set.seed(42)

## Perform SMOTE to undersample 'normal' class by 0.875 times and oversample all minority classes with a maximum 20 times
training_smote1 <- SmoteClassif(Arrhythmia_Class~., training1, 
                               C.perc = list(normal=0.875, coronary_artery_disease=3.3, 
                                             old_anterior_myocardial_infarction=9.2, old_inferior_myocardial_infarction=9.2, 
                                             sinus_tachycardy=9, sinus_bradycardy=7, ventricular_premature_contraction=20, 
                                             supraventricular_premature_contraction=20, left_bundle_branch_block=13, 
                                             right_bundle_branch_block=3, left_ventricule_hypertrophy=20, 
                                             atrial_fibrillation=18, other=7), k = 1, dist = "HEOM")
dim(training_smote1)
###This results in a dataset with 1210 rows and 260 columns.
table(training_smote1$Arrhythmia_Class)
###This gives 150 samples in 'normal' class.  
###Using a maximum of oversampling by 20 times prevents generating 
###unneccessary copies of classes with originally less than 4 samples.
###k = 1 because the smallest class 
###'supraventricular_premature_contraction' has 2 samples and k has to be less than that. 
###A distance metric for nominal and numeric features was used, a heterogenous distance metric, 'HEOM.'

## Check balanced dataset
prop.table(table(training_smote1$Arrhythmia_Class))
anyDuplicated(training_smote1) ### 0


# Feature Subset on training_smote
## Subset training_smote data to include only features from feature subset
### Using all feature selection techniques generating 19 attributes and the class in a subset
training_data1 <- training_smote1[, c("Arrhythmia_Class", "Avg_duration_bet_two_consecutive_T_waves_msec",
                                    "Heart_rate_bpm", "AVF_Avg_width_Q_wave_msec", 
                                    "V1_No_intrinsic_deflections", "V3_No_intrinsic_deflections", 
                                    "V2_Amp_R'_wave_mV", "V3_Amp_Q_wave_mV", "V3_Amp_R_wave_mV", 
                                    "V4_Amp_T_wave_mV", "V3_Avg_width_S_wave_msec", "V1_QRSA", "V3_QRSTA", 
                                    "V3_Avg_width_R_wave_msec", "V6_Amp_T_wave_mV", 
                                    "Avg_QRS_duration_msec", "V4_Amp_R_wave_mV", "V1_Amp_T_wave_mV", 
                                    "AVR_Amp_T_wave_mV", 
                                    "Avg_duration_bet_onset_Q_and_offset_T_waves_msec")]
dim(training_data1) ###1210 rows and 20 columns
glimpse(training_data1)



# Machine Learning - Supervised Learning - Multiclass Classsifcation Methods


# Creating 10-Fold Cross Validation training control

## Separate training_data1 into Training and Validation Sets

### Set seed for reproducible results 
set.seed(42)

### Define training control for models to use : 10-Fold Cross-Validation
trainControl <- trainControl(method = "cv",  #cross-validation
                             number = 10,  #using 10 folds
                             verboseIter = TRUE,
                             summaryFunction = multiClassSummary)  #multiclass distribution


# Training Classification Models

## Naive Bayes classificaton model
model_nb <- train(Arrhythmia_Class ~ ., 
                  data = training_data1, 
                  method = "nb",
                  trControl = trainControl)

### Summary of results
print(model_nb)
results_nb <- model_nb$resample
results_nb
nb_final_model1 <- model_nb$finalModel
str(nb_final_model1)
plot(model_nb)


## k-Nearest Neighbor classificaton model
model_knn <- train(Arrhythmia_Class ~ ., 
                   data = training_data1, 
                   method = "knn",
                   trControl = trainControl)

### Summary of results
print(model_knn)
results_knn <- model_knn$resample
results_knn
knn_final_model1 <- model_knn$finalModel
str(knn_final_model1)
plot(model_knn)
###allowParellel = TRUE


## Random Forest classfication model
model_rf <- train(Arrhythmia_Class ~ ., 
                  data = training_data1,
                  method = "rf",
                  trControl = trainControl)

### Summary of results
print(model_rf)
##str(model_rf)
results_rf <- model_rf$resample
results_rf
rf_final_model1 <- model_rf$finalModel
str(rf_final_model1)
plot(model_rf)


## Compare Classification Accuracies of Models
plot(results_nb$Accuracy, results_knn$Accuracy)
plot(results_nb$Accuracy, results_rf$Accuracy)
plot(results_knn$Accuracy, results_rf$Accuracy)
###All three algorithms' predictions are not related linearly.


# Predictions of 3 Classification Models on Test Set

## Prepare Test set
### Check Missing Values
sum(is.na(test1)) ###111 missing values
missing_test_col1 <- colSums(is.na(test1))
### Attributes with missing values
missing_test_attr1 <- names(test1)[missing_test_col1 > 0]
missing_test_attr1 ###3 attributes with missing values are not included in feature selected subset for classfication

## Subset test set to include only features from feature selection subset
## Using all feature selection techniques generating 19 attributes and the class in a subset
test_data1 <- test1[, c("Arrhythmia_Class", "Avg_duration_bet_two_consecutive_T_waves_msec",
                      "Heart_rate_bpm", "AVF_Avg_width_Q_wave_msec", 
                      "V1_No_intrinsic_deflections", "V3_No_intrinsic_deflections", 
                      "V2_Amp_R'_wave_mV", "V3_Amp_Q_wave_mV", "V3_Amp_R_wave_mV", 
                      "V4_Amp_T_wave_mV", "V3_Avg_width_S_wave_msec", "V1_QRSA", "V3_QRSTA", 
                      "V3_Avg_width_R_wave_msec", "V6_Amp_T_wave_mV", 
                      "Avg_QRS_duration_msec", "V4_Amp_R_wave_mV", "V1_Amp_T_wave_mV", 
                      "AVR_Amp_T_wave_mV", 
                      "Avg_duration_bet_onset_Q_and_offset_T_waves_msec")]

dim(test_data1) ### 129 rows and 20 columns
sum(is.na(test_data1)) ### The are no missing values in these attributes.


## Predict on Test Set

### Naive Bayes
predictions_nb1 <- predict(model_nb, test_data1[,-1])
predictions_nb1

### k-Nearest Neighbors
predictions_knn1 <- predict(model_knn, test_data1[,-1])
predictions_knn1

### Random Forest
predictions_rf1 <- predict(model_rf, test_data1[,-1])
predictions_rf1


## Confusion Matrices

### Load `tidyr` to reshape confusion matrices
library(tidyr)

### Naive Bayes
confMat_nb1 <- confusionMatrix(predictions_nb1, test_data1$Arrhythmia_Class)
confMat_nb1
str(confMat_nb1$table)
confMat_nb1_df <- data.frame(confMat_nb1$table)
confMat_nb1_df2 <- spread(confMat_nb1_df, "Reference", "Freq")

### k-Nearest Neighbors
confMat_knn1 <- confusionMatrix(predictions_knn1, test_data1$Arrhythmia_Class)
confMat_knn1
str(confMat_knn1$table)
confMat_knn1_df <- data.frame(confMat_knn1$table)
confMat_knn1_df2 <- spread(confMat_knn1_df, "Reference", "Freq")

### Random Forest
confMat_rf1 <- confusionMatrix(predictions_rf1, test_data1$Arrhythmia_Class)
confMat_rf1
str(confMat_rf1$table)
confMat_rf1_df <- data.frame(confMat_rf1$table)
confMat_rf1_df2 <- spread(confMat_rf1_df, "Reference", "Freq")



# Building Heterogenous Stacking Ensemble Classification Model

## Loading library
library(caret)

## Set seed 
set.seed(42)

## Split training data with selected features and with SMOTE into training and validation sets (50:50)
inTrain1a <- createDataPartition(y = training_data1$Arrhythmia_Class, p = 0.50, list = FALSE)
train1 <- training_data1[inTrain1a,]
valid1 <- training_data1[-inTrain1a,]
dim(train1) 
dim(valid1) 
ytrain1 <- train1$Arrhythmia_Class
yvalid1 <- valid1$Arrhythmia_Class

## Specify and fit base models
### Define training control for models to use : 10-Fold Cross-Validation
trainControl <- trainControl(method = "cv",  #cross-validation
                             number = 10,  #using 10 folds
                             verboseIter = TRUE,
                             summaryFunction = multiClassSummary)  #multiclass distribution

### Train base models
#### Naive Bayes
model_base_nb1 <- train(Arrhythmia_Class ~ ., 
                        data = train1, 
                        method = "nb",
                        trControl = trainControl)
print(model_base_nb1)
results_model_base_nb1 <- model_base_nb1$resample
results_model_base_nb1
model_base_final_model_nb1 <- model_base_nb1$finalModel
model_base_final_model_nb1

#### k-Nearest Neighbors
model_base_knn1 <- train(Arrhythmia_Class ~ ., 
                         data = train1, 
                         method = "knn",
                         trControl = trainControl)
print(model_base_knn1)
###k=5
results_model_base_knn1 <- model_base_knn1$resample
results_model_base_knn1
model_base_final_model_knn1 <- model_base_knn1$finalModel
model_base_final_model_knn1

#### Random Forest
model_base_rf1 <- train(Arrhythmia_Class ~ ., 
                        data = train1, 
                        method = "rf",
                        trControl = trainControl)
print(model_base_rf1)
###mtry=2
results_model_base_rf1 <- model_base_rf1$resample
results_model_base_rf1
model_base_final_model_rf1 <- model_base_rf1$finalModel
model_base_final_model_rf1

### Plot accuracies of base models
plot(results_model_base_nb1$Accuracy, results_model_base_knn1$Accuracy, ylim = c(0.5, 1), xlim = c(0.5, 1), xlab = "Accuracy of NB Model",  ylab = "Accuracy of kNN Model", main = "Accuracies of kNN vs. NB Models")
abline(0, 1, col="blue", lty=2)
plot(results_model_base_nb1$Accuracy, results_model_base_rf1$Accuracy, ylim = c(0.5, 1), xlim = c(0.5, 1), xlab = "Accuracy of NB Model",  ylab = "Accuracy of RF Model", main = "Accuracies of NB vs. RF Models")
abline(0, 1, col="blue", lty=2)
plot(results_model_base_knn1$Accuracy, results_model_base_rf1$Accuracy, ylim = c(0.5, 1), xlim = c(0.5, 1),  xlab = "Accuracy of kNN Model", ylab = "Accuracy of RF Model", main = "Accuracies of kNN vs. RF Models")
abline(0, 1, col="blue", lty=2)
###No consisent points on line.


## Predict on validation set
preds_nb1 <- predict(model_base_nb1, valid1[,-1])
preds_knn1 <- predict(model_base_knn1, valid1[,-1])
preds_rf1 <- predict(model_base_rf1, valid1[,-1])
## Predict on test set
test_preds_nb1 <- predict(model_base_nb1, test_data1[,-1])
test_preds_knn1 <- predict(model_base_knn1, test_data1[,-1])
test_preds_rf1 <- predict(model_base_rf1, test_data1[,-1])

## Create a dataset for valid and test predictions via stacking predictions
stacked_predictions1 <- data.frame(cbind(preds_nb1, preds_knn1, preds_rf1))
stacked_test_predictions1 <- data.frame(cbind(preds_nb1=test_preds_nb1, preds_knn1=test_preds_knn1, preds_rf1=test_preds_rf1))


## Set seed
set.seed(42)

## Specify and fit a meta model on stacked_predictions
meta_model1 <- train(stacked_predictions1, yvalid1, 
                     method = "rf",
                     trControl = trainControl)

print(meta_model1)
###mtry=2
results_meta_model1 <- meta_model1$resample
results_meta_model1
meta_model_final_model1 <- meta_model1$finalModel
meta_model_final_model1


## Make predictions on stacked predictions of test data
final_predictions1 <- predict(meta_model1, stacked_test_predictions1)


## Confusion Matrix for Ensembler
confMat_ensembler1 <- confusionMatrix(final_predictions1, test_data1$Arrhythmia_Class)
confMat_ensembler1
str(confMat_ensembler1$table)
confMat_ensembler1_df <- data.frame(confMat_ensembler1$table)
confMat_ensembler1_df2 <- spread(confMat_ensembler1_df, "Reference", "Freq")

